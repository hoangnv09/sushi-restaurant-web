#!/usr/bin/env node


var fs = require('fs');
var path = require('path');
var program = require('commander');

program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf-8')).version)
  .usage('<javascript>')
  .option('-r, --raw', 'do not attempt to convert data from JSON')
  .option('-u, --ugly', 'ugly output (no indentation)')
  .option('-s, --silent', 'do not print result to standard output')
  .parse(process.argv);

var stdin = "";

if (!process.stdin.isTTY) {
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk) {
    stdin += chunk;
  })
  process.stdin.on('end', start);
} else {
  start();
}

function start() {
  if (!program.raw) {
    // attempt to interpret stdin as JSON
    try {
      stdin = JSON.parse(stdin);
    } catch (e) {
      // ignore
    }
  }
  
  // expose environment variables as globals preceded with $
  for (var name in process.env) {
    var value = process.env[name];

    if (!program.raw) {
      // attempt to interpret variable as JSON
      try {
        value = JSON.parse(value);
      } catch (e) {
        // ignore
      }
    }

    global['$' + name] = value;
  }
    
  var result, output;
  
  try {
    result = output = eval('(' + (program.args.join(' ') || 'undefined') + ')');
  } catch (e) {
    if (e instanceof SyntaxError) {
      result = output = eval(program.args.join(' ') || 'undefined');
    } else {
      throw e;
    }
  }
  
  if (typeof output == 'string') {
    if (output[output.length - 1] != '\n') {
      output = output + '\n';
    }
  } else {
    try {
      if (program.ugly) {
        output = JSON.stringify(output) + '\n';        
      } else {
        output = JSON.stringify(output, null, 2) + '\n';
      }
    } catch (e) {
      // ignore
    }
  }
  
  if (!program.silent) {
    process.stdout.write(output);
  }
  
  process.exit(result ? 0 : 1);
}
//  /*=============== SHOW MENU ===============*/
//  const showMenu = (toggleId, navId) => {
//   const toggle = document.getElementById(toggleId),
//       nav = document.getElementById(navId)

//   toggle.addEventListener('click', () => {
//       // Add show-menu class to nav menu
//       nav.classList.toggle('show-menu')

//       // Add show-icon to show and hide the menu icon
//       toggle.classList.toggle('show-icon')
//   })
// }

// // menu
// let menu = document.querySelector('#menu-bars');
//     let navbar = document.querySelector('.navbar');

//     menu.onclick = () => {
//         menu.classList.toggle('fa-times');
//         navbar.classList.toggle('active');
//     }


//     /*=============== SEARCH ===============*/
//     const search = document.getElementById('search'),
//         searchBtn = document.getElementById('search-btn'),
//         searchClose = document.getElementById('search-close')

//     /* Search show */
//     searchBtn.addEventListener('click', () => {
//         search.classList.add('show-search')
//     })

//     /* Search hidden */
//     searchClose.addEventListener('click', () => {
//         search.classList.remove('show-search')
//     })

//     /*=============== LOGIN ===============*/
//     const login = document.getElementById('login'),
//         loginBtn = document.getElementById('login-btn'),
//         loginClose = document.getElementById('login-close')

//     /* Login show */
//     loginBtn.addEventListener('click', () => {
//         login.classList.add('show-login')
//     })

//     /* Login hidden */
//     loginClose.addEventListener('click', () => {
//         login.classList.remove('show-login')
//     })

